# import os
# import json
# import pickle
# import networkx as nx
# import osmnx as ox
# import matplotlib.pyplot as plt
# from itertools import combinations
# from concurrent.futures import ThreadPoolExecutor
# from tqdm import tqdm
# 
# CITY_NAME = "Montr√©al, Qu√©bec, Canada"
# OUTPUT_DIR = "resources/whole_city"
# os.makedirs(OUTPUT_DIR, exist_ok=True)
# 
# def shortest_path_length_safe(G, source, target):
#     try:
#         return nx.shortest_path_length(G, source, target, weight="length")
#     except nx.NetworkXNoPath:
#         return float("inf")
# 
# def compute_pair_distance(args):
#     u, v, G = args
#     dist = shortest_path_length_safe(G, u, v)
#     return (u, v, dist)
# 
# def generate_city_eulerian_path():
#     print(f"üì° Chargement du graphe de Montr√©al...")
#     G = ox.graph_from_place(CITY_NAME, network_type='drive', simplify=True, retain_all=False)
#     G_un = G.to_undirected()
#     with open(os.path.join(OUTPUT_DIR, "raw_graph.pkl"), "wb") as f:
#         pickle.dump(G_un, f)
# 
#     odd_nodes = [n for n, d in G_un.degree if d % 2 == 1]
#     print(f"üîé {len(odd_nodes)} n≈ìuds de degr√© impair")
# 
#     print("üßÆ Calcul des distances entre paires de n≈ìuds impairs (multithread)...")
#     pairs = list(combinations(odd_nodes, 2))
#     args_list = [(u, v, G_un) for u, v in pairs]
# 
#     distances = {}
#     with ThreadPoolExecutor() as executor:
#         for u, v, dist in tqdm(executor.map(compute_pair_distance, args_list), total=len(args_list), desc="‚è≥ Progression"):
#             if dist != float("inf"):
#                 distances[(u, v)] = dist
# 
#     print("‚öñÔ∏è R√©solution du couplage minimum parfait (matching)...")
#     G_match = nx.Graph()
#     for (u, v), dist in distances.items():
#         G_match.add_edge(u, v, weight=dist)
# 
#     matching = nx.algorithms.matching.min_weight_matching(G_match, maxcardinality=True)
#     print(f"‚úÖ {len(matching)} paires appari√©es")
# 
#     # Cr√©ation du graphe eul√©rien
#     G_euler = G_un.copy()
#     for u, v in matching:
#         try:
#             path = nx.shortest_path(G_un, source=u, target=v, weight="length")
#             nx.add_path(G_euler, path)
#         except nx.NetworkXNoPath:
#             print(f"‚ö†Ô∏è Aucun chemin entre {u} et {v}, ignor√©")
# 
#     with open(os.path.join(OUTPUT_DIR, "eulerized_graph.pkl"), "wb") as f:
#         pickle.dump(G_euler, f)
# 
#     print("üß© Calcul du circuit eul√©rien...")
#     circuit = list(nx.eulerian_circuit(G_euler))
#     path_json = [{"u": u, "v": v} for u, v in circuit]
#     with open(os.path.join(OUTPUT_DIR, "eulerian_path.json"), "w") as f:
#         json.dump(path_json, f, indent=2)
# 
#     path_nodes = [u for u, v in circuit] + [circuit[-1][1]]
#     print("üé® G√©n√©ration du trac√© PNG...")
# 
#     fig, ax = ox.plot_graph(
#         G_un,
#         show=False, close=False,
#         edge_color='lightgray',
#         node_size=0,
#         bgcolor='white'
#     )
# 
#     coords = [(G_un.nodes[n]['y'], G_un.nodes[n]['x']) for n in path_nodes if n in G_un.nodes and 'x' in G_un.nodes[n] and 'y' in G_un.nodes[n]]
#     if coords:
#         lats, lons = zip(*coords)
#         ax.plot(lons, lats, color='red', linewidth=1.2, alpha=0.7)
#         ax.set_title(f"Chemin eul√©rien ‚Äì {CITY_NAME}", fontsize=10)
#         plt.savefig(os.path.join(OUTPUT_DIR, "path_visualization.png"), dpi=300)
#         plt.close()
#         print("‚úÖ Trac√© enregistr√©")
#     else:
#         print("‚ùå Aucun point valide pour le trac√©")
# 
# if __name__ == "__main__":
#     generate_city_eulerian_path()
#     print("‚úÖ Traitement complet de la ville de Montr√©al.")

import os
import json
import pickle
import networkx as nx
import osmnx as ox
import matplotlib.pyplot as plt
from itertools import combinations
from multiprocessing import Pool, cpu_count
from tqdm import tqdm
from functools import partial

# Liste des zones (quartiers ou districts) √† traiter ind√©pendamment
ZONES = [
    "Le Plateau-Mont-Royal, Montr√©al, Qu√©bec, Canada",
    "Outremont, Montr√©al, Qu√©bec, Canada",
    "Verdun, Montr√©al, Qu√©bec, Canada",
    "Anjou, Montr√©al, Qu√©bec, Canada",
    "Rivi√®re-des-Prairies‚ÄìPointe-aux-Trembles, Montr√©al, Qu√©bec, Canada",
    "Ville-Marie, Montr√©al, Qu√©bec, Canada",  # exemple suppl√©mentaire
]

OUTPUT_DIR = "resources/parallel_city"
os.makedirs(OUTPUT_DIR, exist_ok=True)

def shortest_path_length_safe(G, source, target):
    try:
        return nx.shortest_path_length(G, source, target, weight="length")
    except nx.NetworkXNoPath:
        return float("inf")

def compute_pair_distances(G_un, odd_nodes):
    pairs = list(combinations(odd_nodes, 2))
    distances = {}
    for u, v in tqdm(pairs, desc="üìè Distances", leave=False):
        dist = shortest_path_length_safe(G_un, u, v)
        if dist != float("inf"):
            distances[(u, v)] = dist
    return distances

def process_zone(place):
    slug = place.split(",")[0].lower().replace(" ", "-")
    path_dir = os.path.join(OUTPUT_DIR, slug)
    os.makedirs(path_dir, exist_ok=True)

    print(f"\nüìç Traitement : {place}")
    G = ox.graph_from_place(place, network_type='drive', simplify=True, retain_all=False)
    G_un = G.to_undirected()
    with open(os.path.join(path_dir, "raw_graph.pkl"), "wb") as f:
        pickle.dump(G_un, f)

    odd_nodes = [n for n, d in G_un.degree if d % 2 == 1]
    print(f"üîé {place}: {len(odd_nodes)} n≈ìuds impairs")

    distances = compute_pair_distances(G_un, odd_nodes)

    print(f"‚öñÔ∏è {place}: matching parfait...")
    G_match = nx.Graph()
    for (u, v), dist in distances.items():
        G_match.add_edge(u, v, weight=dist)

    matching = nx.algorithms.matching.min_weight_matching(G_match)
    print(f"üîó {place}: {len(matching)} paires match√©es")

    # Ajouter les ar√™tes au graphe eul√©rien
    G_euler = G_un.copy()
    for u, v in matching:
        try:
            path = nx.shortest_path(G_un, source=u, target=v, weight="length")
            nx.add_path(G_euler, path)
        except nx.NetworkXNoPath:
            print(f"‚ö†Ô∏è {place}: pas de chemin entre {u} et {v}")

    with open(os.path.join(path_dir, "eulerized_graph.pkl"), "wb") as f:
        pickle.dump(G_euler, f)

    print(f"üß© {place}: Calcul du circuit eul√©rien")
    circuit = list(nx.eulerian_circuit(G_euler))
    path_json = [{"u": u, "v": v} for u, v in circuit]
    with open(os.path.join(path_dir, "eulerian_path.json"), "w") as f:
        json.dump(path_json, f, indent=2)

    path_nodes = [u for u, v in circuit] + [circuit[-1][1]]

    print(f"üñºÔ∏è  {place}: Trac√© graphique...")
    fig, ax = ox.plot_graph(
        G_un,
        show=False, close=False,
        edge_color='lightgray',
        node_size=0,
        bgcolor='white'
    )

    coords = [(G_un.nodes[n]['y'], G_un.nodes[n]['x']) for n in path_nodes if n in G_un.nodes and 'x' in G_un.nodes[n] and 'y' in G_un.nodes[n]]
    if coords:
        lats, lons = zip(*coords)
        ax.plot(lons, lats, color='red', linewidth=1.3, alpha=0.7)
        ax.set_title(f"Chemin eul√©rien ‚Äì {place}", fontsize=10)
        plt.savefig(os.path.join(path_dir, "path_visualization.png"), dpi=300)
        plt.close()
        print(f"‚úÖ {place}: Fini")
    else:
        print(f"‚ùå {place}: Aucune coordonn√©e valide √† tracer")

def run_parallel():
    print(f"üöÄ Traitement parall√®le avec {min(cpu_count(), len(ZONES))} c≈ìurs...")
    with Pool(processes=min(cpu_count(), len(ZONES))) as pool:
        list(tqdm(pool.imap_unordered(process_zone, ZONES), total=len(ZONES), desc="üì¶ Global"))

if __name__ == "__main__":
    run_parallel()
    print("üèÅ Tous les quartiers ont √©t√© trait√©s.")
