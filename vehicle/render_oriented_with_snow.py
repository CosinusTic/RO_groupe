#!/usr/bin/env python3
"""
Interactive Mapbox rendering:
  ‚Ä¢ black lines  ‚Äì edges with snow (read from snow_map.csv)
  ‚Ä¢ coloured lines ‚Äì oriented Eulerian drone walk (one colour per borough)
Files required per borough folder:
  eulerized_graph_oriented.pkl
  eulerian_path_oriented.json
  snow_map.csv                (generated by make snow)
"""
import os, json, csv, pickle
from collections import defaultdict
import plotly.graph_objects as go
from plotly.colors import qualitative

NEIGH_DIR  = "resources/neighborhoods"
OUT_HTML   = "resources/unified/drone_oriented_with_snow.html"
PALETTE    = qualitative.Dark24           # 24 distinct colours

os.makedirs(os.path.dirname(OUT_HTML), exist_ok=True)

# ------------------------------------------------------------------
def add_seg(store, lat1, lon1, lat2, lon2):
    store["lat"] += [lat1, lat2, None]
    store["lon"] += [lon1, lon2, None]
# ------------------------------------------------------------------
def main():
    paths = defaultdict(lambda: {"lat": [], "lon": [], "count": 0})
    snow  = {"lat": [], "lon": []}
    allpt = set()
    done = skipped = 0

    for idx, slug in enumerate(sorted(os.listdir(NEIGH_DIR))):
        folder = os.path.join(NEIGH_DIR, slug)
        if not os.path.isdir(folder):
            continue

        g_pkl = os.path.join(folder, "eulerized_graph_oriented.pkl")
        p_js  = os.path.join(folder, "eulerian_path_oriented.json")
        s_csv = os.path.join(folder, "snow_map.csv")

        if not (os.path.isfile(g_pkl) and os.path.isfile(p_js)):
            print(f"‚ö†  skipped {slug:30} (missing oriented files)")
            skipped += 1
            continue

        # ----- load graph & walk
        G = pickle.load(open(g_pkl, "rb"))
        walk = json.load(open(p_js))
        for edge in walk:
            u, v = edge["u"], edge["v"]
            if u in G.nodes and v in G.nodes:
                add_seg(paths[slug],
                        G.nodes[u]["y"], G.nodes[u]["x"],
                        G.nodes[v]["y"], G.nodes[v]["x"])
                paths[slug]["count"] += 1
                allpt.update([(G.nodes[u]["y"], G.nodes[u]["x"]),
                              (G.nodes[v]["y"], G.nodes[v]["x"])])

        # ----- load snow edges
        if os.path.isfile(s_csv):
            with open(s_csv, newline="") as f:
                for r in csv.DictReader(f):
                    if r["snow"] != "1": continue
                    u, v = int(r["u"]), int(r["v"])
                    if u in G.nodes and v in G.nodes:
                        add_seg(snow,
                                G.nodes[u]["y"], G.nodes[u]["x"],
                                G.nodes[v]["y"], G.nodes[v]["x"])
                        allpt.update([(G.nodes[u]["y"], G.nodes[u]["x"]),
                                      (G.nodes[v]["y"], G.nodes[v]["x"])])
        print(f"‚úî  added {slug:30}  {paths[slug]['count']:,} segments")
        done += 1

    if not allpt:
        print("‚ùå Nothing to render.")
        return

    cen_lat = sum(p[0] for p in allpt)/len(allpt)
    cen_lon = sum(p[1] for p in allpt)/len(allpt)
    colours = {s: PALETTE[i % len(PALETTE)] for i, s in enumerate(paths)}

    fig = go.Figure()

    # 1Ô∏è‚É£  draw coloured drone paths first (below)
    for slug, d in paths.items():
        fig.add_trace(go.Scattermapbox(
            lat=d["lat"], lon=d["lon"],
            mode="lines",
            line=dict(width=2, color=colours[slug]),
            name=slug
        ))

    # 2Ô∏è‚É£  draw snow overlay last (above)
    if snow["lat"]:
        fig.add_trace(go.Scattermapbox(
            lat=snow["lat"], lon=snow["lon"],
            mode="lines",
            line=dict(width=4, color="black"),
            name="snow",
            hoverinfo="skip"
        ))

    fig.update_layout(
        mapbox=dict(style="carto-positron",
                    center=dict(lat=cen_lat, lon=cen_lon),
                    zoom=11),
        margin=dict(r=0, t=40, l=0, b=0),
        title="üöÄ Oriented Drone Paths with Snow Overlay ‚Äì Montr√©al",
        hovermode="closest"
    )

    fig.write_html(OUT_HTML, include_plotlyjs="cdn", full_html=True)
    print(f"\n‚úÖ Map saved ‚Üí {OUT_HTML}")
    print(f"   Boroughs rendered: {done}, skipped: {skipped}")

# ------------------------------------------------------------------
if __name__ == "__main__":
    main()

